# Generated by Django 5.2.3 on 2025-06-24 02:02

import accounts.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('duration_days', models.IntegerField(help_text='Duration of the plan in days')),
                ('description', models.TextField(blank=True, null=True)),
                ('features', models.JSONField(blank=True, default=list, help_text="List of features included in this plan (e.g., ['Ad-free experience', 'Send unlimited messages'])")),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Subscription Plan',
                'verbose_name_plural': 'Subscription Plans',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='username')),
                ('bio', models.TextField(blank=True, help_text='Tell us about yourself.', max_length=500, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default_avatar.png', null=True, upload_to=accounts.models.user_image_directory_path, validators=[accounts.models.validate_image_file_size])),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('phone_number', models.CharField(blank=True, help_text='Your WhatsApp phone number including country code (e.g., +2348012345678)', max_length=20, null=True)),
                ('user_type', models.CharField(choices=[('DATING', 'Dating'), ('HOOKUP', 'Hookup'), ('SUGAR_DADDY', 'Sugar Daddy'), ('SUGAR_MUMMY', 'Sugar Mummy')], default='DATING', help_text='Are you looking for dating, hookups, or are you a sugar daddy/mummy?', max_length=20)),
                ('seeking', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('A', 'Anyone')], help_text='Who are you seeking?', max_length=1, null=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('premium_expiry_date', models.DateTimeField(blank=True, null=True)),
                ('height', models.CharField(blank=True, choices=[('48', '4\'0"'), ('49', '4\'1"'), ('50', '4\'2"'), ('51', '4\'3"'), ('52', '4\'4"'), ('53', '4\'5"'), ('54', '4\'6"'), ('55', '4\'7"'), ('56', '4\'8"'), ('57', '4\'9"'), ('58', '4\'10"'), ('59', '4\'11"'), ('60', '5\'0"'), ('61', '5\'1"'), ('62', '5\'2"'), ('63', '5\'3"'), ('64', '5\'4"'), ('65', '5\'5"'), ('66', '5\'6"'), ('67', '5\'7"'), ('68', '5\'8"'), ('69', '5\'9"'), ('70', '5\'10"'), ('71', '5\'11"'), ('72', '6\'0"'), ('73', '6\'1"'), ('74', '6\'2"'), ('75', '6\'3"'), ('76', '6\'4"'), ('77', '6\'5"'), ('78', '6\'6"'), ('79', '6\'7"'), ('80', '6\'8"'), ('81', '6\'9"'), ('82', '6\'10"'), ('83', '6\'11"'), ('84', '7\'0"'), ('85', '7\'1"'), ('86', '7\'2"'), ('87', '7\'3"'), ('88', '7\'4"'), ('89', '7\'5"'), ('90', '7\'6"'), ('91', '7\'7"'), ('92', '7\'8"'), ('93', '7\'9"'), ('94', '7\'10"'), ('95', '7\'11"'), ('96', '8\'0"')], max_length=10, null=True)),
                ('body_type', models.CharField(blank=True, choices=[('SLIM', 'Slim'), ('ATHLETIC', 'Athletic'), ('AVERAGE', 'Average'), ('CURVY', 'Curvy'), ('MUSCULAR', 'Muscular'), ('PLUS_SIZE', 'Plus Size')], max_length=20, null=True)),
                ('ethnicity', models.CharField(blank=True, choices=[('CAUCASIAN', 'Caucasian'), ('AFRICAN', 'African'), ('ASIAN', 'Asian'), ('HISPANIC', 'Hispanic'), ('MIXED', 'Mixed'), ('OTHER', 'Other')], max_length=50, null=True)),
                ('religion', models.CharField(blank=True, choices=[('CHRISTIANITY', 'Christianity'), ('ISLAM', 'Islam'), ('HINDUISM', 'Hinduism'), ('BUDDHISM', 'Buddhism'), ('ATHEIST', 'Atheist'), ('OTHER', 'Other')], max_length=50, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('SINGLE', 'Single'), ('DIVORCED', 'Divorced'), ('WIDOWED', 'Widowed'), ('SEPARATED', 'Separated'), ('IN_RELATIONSHIP', 'In a Relationship')], max_length=30, null=True)),
                ('has_children', models.BooleanField(blank=True, null=True)),
                ('education', models.CharField(blank=True, choices=[('HIGH_SCHOOL', 'High School'), ('SOME_COLLEGE', 'Some College'), ('ASSOCIATES', 'Associates Degree'), ('BACHELORS', 'Bachelors Degree'), ('MASTERS', 'Masters Degree'), ('PHD', 'PhD')], max_length=50, null=True)),
                ('occupation', models.CharField(blank=True, choices=[('STUDENT', 'Student'), ('EMPLOYED', 'Employed'), ('SELF_EMPLOYED', 'Self-Employed'), ('UNEMPLOYED', 'Unemployed'), ('RETIRED', 'Retired')], max_length=100, null=True)),
                ('drinking_habits', models.CharField(blank=True, choices=[('NEVER', 'Never'), ('SOCIALLY', 'Socially'), ('FREQUENTLY', 'Frequently'), ('HEAVILY', 'Heavily')], max_length=20, null=True)),
                ('smoking_habits', models.CharField(blank=True, choices=[('NON_SMOKER', 'Non-Smoker'), ('OCCASIONALLY', 'Occasionally'), ('REGULARLY', 'Regularly'), ('HEAVILY', 'Heavily')], max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='ProfileImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Additional profile image.', upload_to=accounts.models.user_image_directory_path, validators=[accounts.models.validate_image_file_size])),
                ('is_main', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(blank=True, db_index=True, default=0, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('user_profile', models.ForeignKey(help_text='The user profile this image belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='profile_images', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile Image',
                'verbose_name_plural': 'Profile Images',
                'ordering': ['order', '-uploaded_at'],
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='main_additional_image',
            field=models.OneToOneField(blank=True, help_text="Links to a ProfileImage instance if it's currently used as the main profile picture. (This field helps manage which gallery image is the main one visually, syncing with 'profile_picture').", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='is_main_profile_picture_for', to='accounts.profileimage'),
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reference', models.CharField(help_text='Unique transaction reference from Paystack', max_length=100, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed'), ('abandoned', 'Abandoned')], default='pending', max_length=20)),
                ('gateway_response', models.JSONField(blank=True, help_text='Full response from payment gateway', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_transactions', to=settings.AUTH_USER_MODEL)),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.subscriptionplan')),
            ],
            options={
                'verbose_name': 'Payment Transaction',
                'verbose_name_plural': 'Payment Transactions',
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.subscriptionplan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Subscription',
                'verbose_name_plural': 'User Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='The date and time when the like was created.')),
                ('liked_user', models.ForeignKey(help_text="The user who was 'liked'.", on_delete=django.db.models.deletion.CASCADE, related_name='likes_received', to=settings.AUTH_USER_MODEL)),
                ('liker', models.ForeignKey(help_text="The user who performed the 'like' action.", on_delete=django.db.models.deletion.CASCADE, related_name='likes_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Like',
                'verbose_name_plural': 'Likes',
                'ordering': ['-timestamp'],
                'unique_together': {('liker', 'liked_user')},
            },
        ),
    ]
